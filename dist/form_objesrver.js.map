{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./index.js","webpack:///./node_modules/mdn-polyfills/CustomEvent.js","webpack:///./node_modules/mdn-polyfills/NodeList.prototype.forEach.js","webpack:///./node_modules/mdn-polyfills/Object.assign.js","webpack:///./node_modules/mdn-polyfills/Object.entries.js","webpack:///./src/FormObserver.js","webpack:///./src/core/ConsoleExtend.js","webpack:///./src/core/FormControlsCollection.js","webpack:///./src/core/HTMLRadioGroup.js"],"names":["FormObserver","settings","target","fillData","_settings","prefix","consoleVerbose","triggerChangeOnSetter","controlsSelector","Object","assign","init","console","error","serializeControls","fillForm","formElements","FormControlsCollection","form","returnObject","toJSON","condition","messages","log","_target","_controls","_data","_parseControls","querySelectorAll","join","forEach","control","controlType","_getControlType","name","value","_getControlValue","htmlRadioGroup","HTMLRadioGroup","parse","add","_defineMethods","_addEventListeners","_extendValueProperty","eventName","addEventListener","e","conditionalLog","defineProperty","_createGetter","_createSetter","controlName","self","includes","realHTMLInputElement","__proto__","set","call","getOwnPropertyDescriptor","get","newValue","_setControlValue","localName","toLowerCase","type","stopPropagation","currentValue","changeEvent","CustomEvent","bubbles","dispatchEvent","iteratorFunction","keys","key","replace","data","nonValidKeys","push","length","warn","index","values","json","entries","obj","JSON","stringify","radioInput","_list","checkedRadio","listener","options","radioControl","filter","element","checked","radioToCheck","el"],"mappings":"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","file":"form_objesrver.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./index.js\");\n","import { FormObserver } from './src/FormObserver';\n\nexport { FormObserver }; ","!function(){function t(t,e){e=e||{bubbles:!1,cancelable:!1,detail:void 0};var n=document.createEvent(\"CustomEvent\");return n.initCustomEvent(t,e.bubbles,e.cancelable,e.detail),n}\"function\"!=typeof window.CustomEvent&&(t.prototype=window.Event.prototype,window.CustomEvent=t)}();\n","window.NodeList&&!NodeList.prototype.forEach&&(NodeList.prototype.forEach=function(o,t){t=t||window;for(var i=0;i<this.length;i++)o.call(t,this[i],i,this)});\n","\"function\"!=typeof Object.assign&&(Object.assign=function(n){if(null==n)throw new TypeError(\"Cannot convert undefined or null to object\");for(var r=Object(n),t=1;t<arguments.length;t++){var e=arguments[t];if(null!=e)for(var o in e)e.hasOwnProperty(o)&&(r[o]=e[o])}return r});\n","\"function\"!=typeof Object.entries&&(Object.entries=function(e){for(var t=Object.keys(e),n=t.length,r=new Array(n);n--;)r[n]=[t[n],e[t[n]]];return r});\n","import \"mdn-polyfills/Object.assign\";\nimport { FormControlsCollection } from './core/FormControlsCollection';\n\nclass FormObserver {\n  /**\n   * @param {import('./FormObserver').FormObserverSettings} settings\n   */\n  constructor(settings, target = null, fillData = {}) {\n    /**\n     * @private\n     * @type {import('./FormObserver').FormObserverSettings}\n     */\n    this._settings = {\n      prefix: 'fo', // Form Observe\n      consoleVerbose: false,\n      triggerChangeOnSetter: false,\n      controlsSelector: [\n        'input:not([type=\\'button\\']):not([type=\\'submit\\']):not([type=\\'reset\\'])',\n        'textarea',\n        'select'\n      ]\n    };\n\n    // Merge the users settings with the default ones\n    if (settings) {\n      Object.assign(this._settings, settings);\n    }\n\n    if (target) {\n      return this.init(target, fillData);\n    }\n  }\n\n  /**\n   * Initialize the FormObserver on the specified HTMLElement.\n   * \n   * @param {HTMLFormElement | HTMLElement } target\n   * @param {Object?} fillData\n   * \n   * @return {FormControlsCollection}\n   */\n  init(target, fillData) {\n    if (!target) {\n      console.error('No valid target provided');\n      return;\n    }\n\n    target[this._settings.prefix] = this.serializeControls(target);\n\n    if (fillData) {\n      this.fillForm(target[this._settings.prefix], fillData)\n    }\n\n    return target[this._settings.prefix];\n  }\n\n  /**\n   * Serialize a Form end return its Controls as a FormControlsCollection\n   * \n   * @param {HTMLElement | HTMLFormElement} target\n   * \n   * @return {FormControlsCollection}\n   */\n  serializeControls(target) {\n    /**\n     * @type {FormControlsCollection}\n     */\n    let formElements = new FormControlsCollection(target, this._settings);\n\n    return formElements;\n  }\n\n  /**\n   * Fill the form with the data in the given Object.\n   * Each key of the object must correspond to the name of an existing control.\n   * \n   * @param {FormControlsCollection} target \n   * @param {Object} fillData \n   */\n  fillForm(target, fillData) {\n    target.assign(fillData);\n  }\n\n  /**\n   * Returns the data of the form in JSON format.\n   * If param 'returnObject' is true, returns an object instead of a string.\n   * \n   * @param {HTMLFormElement | HTMLElement} form \n   * @param {Boolean?} returnObject\n   *  \n   * @return string | Object\n   */\n  toJSON(form, returnObject = false) {\n    if (form[this._settings.prefix]) {\n      return form[this._settings.prefix].toJSON(returnObject);\n    }\n\n    return {};\n  }\n\n  /**\n   * @return {import('./FormObserver').FormObserverSettings}\n   */\n  get settings() {\n    return this._settings;\n  }\n}\n\nexport { FormObserver }","export default function(condition, ...messages) {\n  if (condition) {\n    console.log(...messages);\n  }\n}","import \"mdn-polyfills/NodeList.prototype.forEach\";\nimport \"mdn-polyfills/CustomEvent\";\nimport \"mdn-polyfills/Object.entries\";\n\nimport conditionalLog from \"./ConsoleExtend\";\nimport { HTMLRadioGroup } from \"./HTMLRadioGroup\";\n\n/**\n * @typedef { HTMLRadioGroup | HTMLInputElement | HTMLTextAreaElement } HTMLFormControlElement\n */\n\n/**\n * I'm not using Proxy due to compatibility issues.\n * In fact this library is compatible even with IE9.\n */\nclass FormControlsCollection {\n  /**\n   * @param {HTMLElement | HTMLFormElement} target\n   * @param {Object?} settings\n   */\n  constructor(target, settings) {\n    /**\n     * @private\n     */\n    this._settings = {\n      controlsSelector: [\n        'input:not([type=\"button\"]):not([type=\"submit\"]):not([type=\"reset\"])',\n        'textarea',\n        'select'\n      ],\n      triggerChangeOnSetter: false,\n      consoleVerbose: false\n    }\n\n\n    if (settings) {\n      Object.assign(this._settings, settings);\n    }\n\n    /**\n     * @private\n     * @type {HTMLElement | HTMLFormElement}\n     */\n    this._target = target;\n\n    /**\n     * @private\n     * @type {Object.<string, HTMLFormControlElement>}\n     */\n    this._controls = {};\n\n    /**\n     * @private\n     * @type {Object.<string, string|boolean>}\n     */\n    this._data = {};\n\n    this._parseControls();\n  }\n\n  /**\n   * @private\n   */\n  _parseControls() {\n    /**\n     * @type {NodeList}\n     */\n    const _controls = this._target.querySelectorAll(this._settings.controlsSelector.join(','));\n\n    _controls.forEach(\n      /**\n       * @param {*} control\n       */\n      control => {\n        const controlType = this._getControlType(control);\n        /**\n         * @type {string}\n         */\n        const name = control['name'];\n        /**\n         * @type {string | Boolean}\n         */\n        const value = this._getControlValue(control);\n\n        // If the control doesn't have a name, skips it.\n        if (!name) {\n          return;\n        }\n\n        this._data['_' + name] = value ? value : (this._data['_' + name] || '');\n\n        // If the control is a Radio, instantiate a new HTMLRadioGroup element that\n        // will contain all the radios with the same name.\n        if (controlType === 'radio') {\n          /**\n           * @type {HTMLRadioGroup}\n           */\n          let htmlRadioGroup = HTMLRadioGroup.parse(this._controls['_' + name]);\n\n          // If the key has already been added, concat the new control with the existing ones\n          if (htmlRadioGroup) {\n            htmlRadioGroup.add(control)\n          } else {\n            this._controls['_' + name] = new HTMLRadioGroup(control);\n          }\n        } else {\n          this._controls['_' + name] = control;\n        }\n\n        this._defineMethods(name);\n        this._addEventListeners(control);\n        this._extendValueProperty(control, controlType, name);\n      });\n  }\n\n  /**\n   * @param {HTMLFormControlElement} control \n   */\n  _addEventListeners(control) {\n    let eventName = 'input';\n    let controlType = this._getControlType(control);\n\n    switch (controlType) {\n      case \"radio\":\n      case \"checkbox\":\n      case \"select\":\n        eventName = 'change';\n        break;\n    }\n\n    // @ts-ignore\n    control.addEventListener(eventName,\n      /**\n       * @param {Event} e\n       */\n      e => {\n        if (e['selfTriggered']) {\n          return;\n        }\n\n        /**\n         * @type {*}\n         */\n        let target = e.target;\n        let value = this._getControlValue(target);\n\n        conditionalLog(this._settings.consoleVerbose, 'OnControlInput');\n\n        this[target.name] = value;\n      })\n  }\n\n  /**\n   * Defines a method for the specified name that return the HTMLElement.\n   * The name is in camelCase with the prefix \"get\".\n   * \n   * @example \n   * this.getEmail() -> // return the HTMLElement\n   * \n   * @param {string} name \n   */\n  _defineMethods(name) {\n    if (name in this) {\n      return;\n    }\n\n    Object.defineProperty(this, name, {\n      ...this._createGetter(name),\n      ...this._createSetter(name)\n    })\n  }\n\n  /**\n   * Extends the original setter for 'value' property, so that each\n   * time a user calls the value setter, this will update also the local object\n   * that contains the control values.\n   * \n   * \n   * Technically this extension of the value setter is useless because the user should\n   * never call this setter manually. Instead should set the new value using the object\n   * provided by this library.\n   * But, to avoid compatibility problems with already written code, i added this extension.\n   *  \n   * \n   * @param {HTMLElement} control \n   * @param {string} controlType \n   * @param {string} controlName \n   */\n  _extendValueProperty(control, controlType, controlName) {\n    let self = this;\n\n    // Avoid changing the value setter for select, radio and checkbox\n    if (['select', 'radio', 'checkbox'].includes(controlType)) {\n      return;\n    }\n\n    // Creates an IIFE that stores the original setter for value property,\n    // so that this can be called once the personal setter has been executed.\n    (function(realHTMLInputElement) {\n      Object.defineProperty(control.__proto__, 'value', {\n        set: function(value) {\n          self._data[controlName] = value;\n\n          return realHTMLInputElement.set.call(this, value);\n        },\n      });\n    }(Object.getOwnPropertyDescriptor(control.__proto__, 'value')));\n  }\n\n  /**\n   * @private\n   * @param {string} name\n   * @return {object}\n   */\n  _createGetter(name) {\n    return {\n      get: () => {\n        conditionalLog(this._settings.consoleVerbose, 'Getter');\n        return this._data['_' + name];\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @param {string} name\n   * @return {object}\n   */\n  _createSetter(name) {\n    return {\n      set:\n        /**\n         * @param {string} newValue\n         */\n        newValue => {\n          // Avoid updating the value if is the same.\n          if (this._data['_' + name] === newValue) {\n            return;\n          }\n\n          conditionalLog(this._settings.consoleVerbose, 'Setter');\n\n          // Updates the value in the object\n          this._data['_' + name] = newValue;\n\n          // Then updates the value of the HTMLElement\n          this._setControlValue(this._controls['_' + name], newValue);\n        }\n    }\n  }\n\n  /**\n   * @private\n   * @param {HTMLFormControlElement} control\n   * @return {string | Boolean}\n   */\n  _getControlValue(control) {\n    let controlType = this._getControlType(control);\n    let value;\n\n    // For selectControl behaves as normal\n    switch (controlType) {\n      case 'radio':\n        value = control['checked'] ? control.value : false;\n\n        break;\n      case 'checkbox':\n        value = control['checked'] ? control.value : false;\n\n        break;\n      default:\n        value = control.value;\n    }\n\n    return value;\n  }\n\n  /**\n   * @param {HTMLFormControlElement} control\n   */\n  _getControlType(control) {\n    let controlType = control.localName.toLowerCase();\n\n    if (controlType === 'input') {\n      controlType = control.type;\n    }\n\n    return controlType;\n  }\n\n  /**\n   * @private\n   * @param {HTMLFormControlElement} control \n   * @param {string} value \n   */\n  _setControlValue(control, value, stopPropagation = false) {\n    let controlType = this._getControlType(control);\n    let currentValue = this._getControlValue(control);\n\n    // Avoid updating the control if the value is the same.\n    if (currentValue === value) {\n      return;\n    }\n\n    switch (controlType) {\n      case 'radio':\n        control.value = value;\n\n        break;\n      case 'checkbox':\n        control['checked'] = !!value;\n\n        break;\n      case 'select':\n        control.value = value;\n\n        // Updates the value stored for the select because if the user tries to set a value \n        // that doesn't exist, the select will be resetted, so the value stored must be updated\n        this._data['_' + control[\"name\"]] = control.value;\n        break;\n      default:\n        control.value = value;\n    }\n\n    conditionalLog(this._settings.consoleVerbose, 'SetControlValue');\n\n    if (this._settings.triggerChangeOnSetter && !stopPropagation) {\n      const changeEvent = new CustomEvent('change', { bubbles: true });\n\n      changeEvent['selfTriggered'] = true;\n\n      conditionalLog(this._settings.consoleVerbose, 'DispatchChangeEvent');\n\n      control.dispatchEvent(changeEvent);\n    }\n  }\n\n  /**\n   * Allow an iteration for each control in the target.\n   * This method extends the NodeList.forEach method.\n   * \n   * @param {function(HTMLFormControlElement, string):void} iteratorFunction \n   */\n  forEach(iteratorFunction) {\n    Object.keys(this._controls).forEach(key => {\n      iteratorFunction(this._controls[key], key.replace(\"_\", \"\"));\n    })\n  }\n\n  /**\n   * Fill the form with the data specified in the object 'data',\n   * where each key is the name of an existing control.\n   * \n   * @param {Object} data\n   */\n  assign(data) {\n    const nonValidKeys = [];\n\n    Object.keys(data).forEach(key => {\n      if ('_' + key in this._data) {\n        this[key] = data[key];\n      } else {\n        nonValidKeys.push(key)\n      }\n    });\n\n    // While assigning the value, if a key wasn't found, \n    // returns a console warn with the unknown keys.\n    if (nonValidKeys.length > 0) {\n      console.warn(\"The folowing fields weren't filled because they weren't found in the specified target.\\n\", nonValidKeys)\n    }\n  }\n\n  /**\n   * Returns the HTMLElement at the given index\n   * \n   * @param {Number} index\n   * @return {HTMLFormControlElement}\n   */\n  getItemAt(index) {\n    return Object.values(this._controls)[index];\n  }\n\n  /**\n   * Creates a method like 'get<ControlName>()' where 'ControlName' \n   * is the name of the control converted in CamelCase,\n   * that returns the HTMLElementof the control\n   * \n   * @param {string} name\n   * @return {HTMLFormControlElement | null}\n   */\n  getControl(name) {\n    conditionalLog(this._settings.consoleVerbose, 'getControl(' + name + ')');\n\n    return this._controls['_' + name];\n  }\n\n  /**\n   * Returns the data of the form in JSON format.\n   * If param 'returnObject' is true, returns an object instead of a string.\n   * \n   * @param {Boolean?} returnObject \n   * \n   * @return string | Object\n   */\n  toJSON(returnObject = false) {\n    let json = {};\n\n    Object.entries(this._data).forEach(obj => {\n      json[obj[0].replace('_', '')] = obj[1]\n    })\n\n    if (returnObject) {\n      return json;\n    }\n\n    return JSON.stringify(json);\n  }\n}\n\nexport { FormControlsCollection };","class HTMLRadioGroup {\n  /**\n   * @param {*} radioInput \n   */\n  constructor(radioInput) {\n    /**\n     * @type {HTMLInputElement[]}\n     */\n    this._list = [];\n\n    this.type = 'radio';\n    this.localName = 'input';\n\n    this.add(radioInput);\n  }\n\n  /**\n   * \n   * @param {*} radioInput \n   */\n  add(radioInput) {\n    this._list.push(radioInput);\n  }\n\n  /**\n   * \n   * @param {Event} e \n   */\n  dispatchEvent(e) {\n    const checkedRadio = this.checkedRadio;\n\n    if (checkedRadio) {\n      checkedRadio.dispatchEvent(e)\n    }\n  }\n\n\n  /**\n   * @param {string} type \n   * @param {EventListenerOrEventListenerObject} listener \n   * @param {boolean? | AddEventListenerOptions} options \n   */\n  addEventListener(type, listener, options) {\n    this._list.forEach(radioControl => {\n      radioControl.addEventListener(type, listener, options);\n    })\n  }\n\n  get checkedRadio() {\n    let radioInput = this._list.filter(element => {\n      return element.checked;\n    })\n\n    return radioInput[0];\n  }\n\n  get value() {\n    const checkedRadio = this.checkedRadio;\n\n    if (checkedRadio) {\n      return checkedRadio.value\n    } else {\n      return false;\n    }\n  }\n\n  set value(value) {\n    /**\n     * @type {HTMLInputElement}\n     */\n    let radioToCheck = this._list.filter((element) => {\n      return element.value === value;\n    })[0]\n\n    if (radioToCheck) {\n      radioToCheck.checked = true;\n    } else {\n      console.warn('The specified value was not found in the required RadioGroup.')\n    }\n  }\n\n  get checked() {\n    return !!this.checkedRadio\n  }\n\n\n  /**\n   * @param {*} el \n   * @return {HTMLRadioGroup}\n   */\n  static parse(el) {\n    return el;\n  }\n}\n\nexport { HTMLRadioGroup };"],"sourceRoot":""}